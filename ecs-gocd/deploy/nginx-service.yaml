AWSTemplateFormatVersion: '2010-09-09'
Description: End-to-End ECS Deployment

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC Id

  PublicSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnet IDs for ALB

  PrivateSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnet IDs for ECS

  ClusterName:
    Type: String
    Default: test-cluster-ecs
    Description: ECS Cluster Name

  ContainerPort:
    Type: Number
    Default: 80
    Description: Port exposed by Container

  ContainerImage:
    Type: String
    Description: Container image URI for ECS task

  AppName:
    Type: String
    Description: Application name to use for ECS service, task, and logs

  InstanceType:
    Type: String
    Default: t3.medium
    Description: EC2 Instance Type

  AmiId:
    Type: AWS::EC2::Image::Id
    Description: Amazon Linux 2 AMI ID for ECS

  DesiredCapacity:
    Type: Number
    Default: 1
    Description: Desired EC2 instances

  MaxSize:
    Type: Number
    Default: 2
    Description: Max EC2 instances

  MinSize:
    Type: Number
    Default: 1
    Description: Min EC2 instances

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: KeyPair name

Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ClusterName

  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2InstanceRole

  ECSAutoScalingSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: Enable traffic from ALB to ECS hosts
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  ECSLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: ecs-template-3
      LaunchTemplateData:
        InstanceType: !Ref InstanceType
        ImageId: !Ref AmiId
        KeyName: !Ref KeyName
        IamInstanceProfile:
          Name: !Ref EC2InstanceProfile
        SecurityGroupIds:           
          - !Ref ECSAutoScalingSecurityGroup
        UserData: !Base64 |
          #!/bin/bash
          echo "ECS_CLUSTER= test-cluster-ecs" >> /etc/ecs/ecs.config

  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref PrivateSubnetIds
      LaunchTemplate:
        LaunchTemplateName: "ecs-template-3"
        Version: !GetAtt ECSLaunchTemplate.LatestVersionNumber
      MinSize: !Ref MinSize
      MaxSize: !Ref MaxSize
      DesiredCapacity: !Ref DesiredCapacity
      Tags:
        - Key: Name
          Value: ECSInstance
          PropagateAtLaunch: true

  NatElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatElasticIP.AllocationId
      SubnetId: !Select [ 0, !Ref PublicSubnetIds ] 
      Tags:
        - Key: Name
          Value: NatGateway

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: PrivateRouteTable

  PrivateRoute:
    Type: AWS::EC2::Route
    DependsOn: NatGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NatGateway

  PrivateRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Select [ 0, !Ref PrivateSubnetIds ]
      RouteTableId: !Ref PrivateRouteTable

  PrivateRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Select [ 1, !Ref PrivateSubnetIds ]
      RouteTableId: !Ref PrivateRouteTable

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: "ecs-alb-test"
      Subnets: !Ref PublicSubnetIds
      SecurityGroups:
        - !Ref ECSAutoScalingSecurityGroup
      Scheme: internet-facing
      Type: application

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VpcId
      Port: !Ref ContainerPort
      Protocol: HTTP
      TargetType: instance
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5    
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: 200-399

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP

  PrivateHostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: nginx.ecs.com
      VPCs:
        - VPCId: !Ref VpcId
          VPCRegion: !Ref AWS::Region
      HostedZoneConfig:
        Comment: "Private hosted zone for ECS app"

  PrivateRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: nginx.ecs.com.
      Name: !Sub "app.${AppName}.ecs.com."
      Type: CNAME
      TTL: 60
      ResourceRecords:
        - !GetAtt ALB.DNSName

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${AppName}"
      RetentionInDays: 7

  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${AppName}-task"
      NetworkMode: bridge
      RequiresCompatibilities:
        - EC2
      Cpu: "256"
      Memory: "512"
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: !Ref AppName 
          Image: !Ref ContainerImage
          Essential: true
          PortMappings:
            - ContainerPort: !Ref ContainerPort
              HostPort: 80
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub "/ecs/${AppName}"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Policies:
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: arn:aws:logs:*:*:log-group:/ecs/*
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:log-group:/ecs/*:*

  ECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - ALBListener 
    Properties:
      Cluster: !Ref ECSCluster
      ServiceName: !Sub "${AWS::StackName}-${AppName}-service"
      DesiredCount: 1
      LaunchType: EC2
      TaskDefinition: !Ref ECSTaskDefinition
      LoadBalancers:
        - ContainerName: app
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref ALBTargetGroup
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50

  ServiceAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: application-autoscaling.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole

  ECSServiceScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: ECSService
    Properties:
      MaxCapacity: 2
      MinCapacity: 1
      ResourceId: !Sub "service/${ClusterName}/${AWS::StackName}-nginx-service"
      RoleARN: !GetAtt ServiceAutoScalingRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  ECSServiceScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: "ecs-scale-policy"
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ECSServiceScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 50.0
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 60
        ScaleOutCooldown: 60

Outputs:
  LoadBalancerDNS:
    Description: "ALB DNS Name"
    Value: !GetAtt ALB.DNSName

  ECSClusterName:
    Description: "ECS Cluster Name"
    Value: !Ref ECSCluster

